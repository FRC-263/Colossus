#include "TankDrive.h"

extern JagData* jagData;

TankDrive::TankDrive(void)
{
	leftBlackMotor = new CANJaguar(LEFTBLACKMOTOR, CANJaguar::kVoltage);	
	leftGreyMotor = new CANJaguar(LEFTGREYMOTOR, CANJaguar::kVoltage);
	rightBlackMotor = new CANJaguar(RIGHTBLACKMOTOR, CANJaguar::kVoltage);
	rightGreyMotor = new CANJaguar(RIGHTGREYMOTOR, CANJaguar::kVoltage);
	
	//leftStick = new Joystick(LEFTSTICK);
	//rightStick = new Joystick(RIGHTSTICK);
	
	ledControl = new DigitalOutput(1);
}

TankDrive::~TankDrive(void)
{
	delete leftBlackMotor;
	delete leftGreyMotor;
	delete rightBlackMotor;
	delete rightGreyMotor;
	
	//delete leftStick;
	//delete rightStick;
}

void TankDrive::SetupDriveTrain()
{
	SetupJaguar(leftBlackMotor);
	SetupJaguar(rightBlackMotor);
	SetupJaguar(leftGreyMotor);
	SetupJaguar(rightGreyMotor);
	
	leftBlackMotor->SetSafetyEnabled(false);
	rightBlackMotor->SetSafetyEnabled(false);
	rightGreyMotor->SetSafetyEnabled(false);
	rightGreyMotor->SetSafetyEnabled(false);
}

void TankDrive::SetupJaguar(CANJaguar *jag, UINT16 codesPerRev)
{
		jag->ConfigEncoderCodesPerRev(codesPerRev);
		jag->ConfigNeutralMode(CANJaguar::kNeutralMode_Jumper);
		jag->SetSpeedReference(CANJaguar::kSpeedRef_Encoder);
		jag->SetPID(CAN_PID_P, CAN_PID_I, CAN_PID_D);
		jag->EnableControl();
}

void TankDrive::SetJagData()
{	
	jagData->leftBlackBusVoltage = leftBlackMotor->GetBusVoltage();
	jagData->leftBlackCurrent = leftBlackMotor->GetOutputCurrent();
	jagData->leftBlackOutVoltage = leftBlackMotor->GetOutputVoltage();
	jagData->leftBlackTemp = leftBlackMotor->GetTemperature();
	
	jagData->leftGreyBusVoltage = leftGreyMotor->GetBusVoltage();
	jagData->leftGreyCurrent = leftGreyMotor->GetOutputCurrent();
	jagData->leftGreyOutVoltage = leftGreyMotor->GetOutputVoltage();
	jagData->leftGreyTemp = leftGreyMotor->GetTemperature();
	
	jagData->rightBlackBusVoltage = rightBlackMotor->GetBusVoltage();
	jagData->rightBlackCurrent = rightBlackMotor->GetOutputCurrent();
	jagData->rightBlackOutVoltage = rightBlackMotor->GetOutputVoltage();
	jagData->rightBlackTemp = rightBlackMotor->GetTemperature();
	
	jagData->rightGreyBusVoltage = rightGreyMotor->GetBusVoltage();
	jagData->rightGreyCurrent = rightGreyMotor->GetOutputCurrent();
	jagData->rightGreyOutVoltage = rightGreyMotor->GetOutputVoltage();
	jagData->rightGreyTemp = rightGreyMotor->GetTemperature();
	
	//jagData->leftSpeed = leftBlackMotor->GetSpeed();
	//jagData->rightSpeed = rightBlackMotor->GetSpeed();
}

void TankDrive::Drive()
{		
	Drive(leftStick->GetY() * -1, rightStick->GetY());
}

void TankDrive::Drive(float leftY, float rightY)
{		
		if(fabs(leftY) > JOYSTICK_ERROR_OFFSET) { 
			leftBlackMotor->Set(leftY * 12); 
			leftGreyMotor->Set(leftY * 12);
		}
		else { 
			leftBlackMotor->Set(0); 
		    leftGreyMotor->Set(0);
		}
		
		if(fabs(rightY) > JOYSTICK_ERROR_OFFSET){ 
			rightBlackMotor->Set(rightY * 12); 
			rightGreyMotor->Set(rightY * 12); 
		}
		else{ 
			rightBlackMotor->Set(0); 
			rightGreyMotor->Set(0); 
		}
}
